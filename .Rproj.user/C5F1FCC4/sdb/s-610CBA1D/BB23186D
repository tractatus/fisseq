{
    "collab_server" : "",
    "contents" : "//============================================================================\n// Name : 1D/2D Wavelet Transform\n// Author : Rafat Hussain\n// Version :\n// Copyright : GNU GPL License\n// Description : LiftWave Wavelet Library Component\n//============================================================================\n/*\n* Copyright (c) 2012 Rafat Hussain\n*\n* This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 2 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n*\n*/\n\n#ifndef ALG_H\n#define ALG_H\n#include <iostream>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate <typename T>\nvoid inline split(vector<T> &sig, vector<T> &even, vector<T> &odd)  {\n\n\tfor (int i=0; i < (int) sig.size(); i++) {\n\t\tif (i%2 == 0) {\n\t\t\teven.push_back(sig[i]);\n\t\t} else {\n\t\t\todd.push_back(sig[i]);\n\t\t}\n\t}\n\t\n\t\n}\n\ntemplate <typename T>\nvoid inline vecmult(vector<T> &sig, double x) {\n\t\n\tfor (int i=0; i < (int) sig.size(); i++ ) {\n\t\tsig[i]= (T) (x*sig[i]);\n\t}\n\t\n}\n\ntemplate <typename T>\nvoid inline merge(vector<T> &sig, vector<T> &even, vector<T> &odd) {\n\t\n\tint N = even.size() + odd.size();\n\t\n\tfor (int i=0; i < N; i++) {\n\t\tif (i%2 == 0) {\n\t\t\tsig.push_back(even[i/2]);\n\t\t} else {\n\t\t\tsig.push_back(odd[i/2]);\n\t\t}\n\t}\n}\n\ntemplate <typename T> \nvoid inline transpose(vector<T> &sig, int rows, int cols,vector<T> &col) {\n\t\n\tfor (int i=0; i < cols; i++) {\n\t\tfor (int j=0; j < rows; j++) {\n\t\t\tcol.push_back(sig[i+j*cols]);\n\t\t}\n\t}\n\t\n}\n\n\n#endif",
    "created" : 1476130097380.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2101389933",
    "id" : "BB23186D",
    "lastKnownWriteTime" : 1347673072,
    "last_content_update" : 1347673072,
    "path" : "~/GitHub/fisseq/src/alg.h",
    "project_path" : "src/alg.h",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}